## What's the difference between push, pull, and fetch?

- `git push` - sends changes from a local branch to a remote repo
- `git fetch` - gets changes from a remote repo into your tracking branch
- `git pull` - gets changes from a remote branch into your tracking branch and merges them into a local branch

People often describe `git push` and `git pull` as equivalent. This isn't entirely correct, because these commands do different things on the back end. 
- `git push` takes your current branch and checks to see whether there's a tracking branch for a remote repository connected to it. If there is, your changes are pushed from your branch to the remote branch. This is how code is shared with a remote repository; you can think of it as "make the remote branch resemble my local branch". This process fails if the remote branch has diverged from your local branch. If it has not diverged, all the commits in the remote branch match those in your local branch. If it has diverged, your local branch needs to be synchronized with the remote branch by using `git pull` or `git fetch` and `git merge`.
- `git fetch` takes your current branch and checks to see if there's a tracking branch. If there is, it looks for changes in the remote branch and pulls them into the tracking branch. `git fetch` does not change your local branch. To do that, you'll need to run `git merge origin/master` (for the "master" branch) to merge those changes into your branch -- probably also called "master." The `git pull` command simply does a `git fetch`, followed immediately by `git merge`. This is often what we want to do, but some people prefer to use `git fetch` followed by `git merge` to make sure they understand the changes they are merging into their branch before the merge happens.
